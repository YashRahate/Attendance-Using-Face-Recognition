from flask import Flask, request, jsonify
from flask_cors import CORS
import os
import numpy as np
import cv2
from deepface import DeepFace
import uuid
import shutil
import json
import pickle
import time
from mtcnn import MTCNN

app = Flask(__name__)
CORS(app)

UPLOAD_FOLDER = 'uploads'
FACE_INFO_FOLDER = 'face_info'

# Create folders if they don't exist
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(FACE_INFO_FOLDER, exist_ok=True)

def detect_face(image_path):
    """
    Detects if there's exactly one face in the image with good conditions
    Returns: (success, message, face_area)
    """
    try:
        img = cv2.imread(image_path)
        if img is None:
            return False, "Failed to read image", None
        
        # Convert to grayscale for face detection
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        
        # Use haar cascade for quick face detection
        face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
        faces = face_cascade.detectMultiScale(gray, 1.3, 5)
        
        if len(faces) == 0:
            return False, "No face detected", None
        if len(faces) > 1:
            return False, "Multiple faces detected", None
        
        # Check image brightness
        brightness = np.mean(gray)
        if brightness < 50:
            return False, "Poor lighting conditions", None
            
        # Store face area
        x, y, w, h = faces[0]
        
        face_area = {
            'x': int(x),
            'y': int(y),
            'w': int(w),
            'h': int(h)
        }
            
        return True, "Face detected successfully", face_area
    except Exception as e:
        return False, f"Error: {str(e)}", None

def extract_face_features(image_path):
    """
    Extract facial features for recognition - ensures consistent format
    """
    try:
        # Use DeepFace to get representation
        embedding_obj = DeepFace.represent(
            img_path=image_path, 
            model_name="Facenet",
            enforce_detection=False
        )
        
        # Make sure we're extracting just the vector
        if isinstance(embedding_obj, list) and len(embedding_obj) > 0:
            # If it's a list (multiple faces), take the first one
            embedding = embedding_obj[0]["embedding"]
        else:
            # If it's a single object
            embedding = embedding_obj["embedding"]
            
        # Convert to numpy array to ensure consistent format
        embedding_array = np.array(embedding)
        
        return embedding_array
    except Exception as e:
        print(f"Error extracting features: {str(e)}")
        return None

@app.route('/api/upload-face', methods=['POST'])
def upload_face():
    if 'image' not in request.files:
        return jsonify({"success": False, "message": "No image provided"}), 400
    
    if 'name' not in request.form or 'roll_no' not in request.form or 'class' not in request.form:
        return jsonify({"success": False, "message": "Missing student information"}), 400
    
    image = request.files['image']
    name = request.form['name']
    roll_no = request.form['roll_no']
    student_class = request.form['class']
    image_index = int(request.form['imageIndex'])  # 0-4 for the 5 images
    
    # Create student ID
    student_id = f"{name}_{roll_no}"
    
    # Create user folder if it doesn't exist
    user_folder = os.path.join(UPLOAD_FOLDER, student_id)
    os.makedirs(user_folder, exist_ok=True)
    
    # Save the image
    image_path = os.path.join(user_folder, f"image_{image_index}.jpg")
    image.save(image_path)
    
    # Detect face and get face area
    is_valid, message, face_area = detect_face(image_path)
    if not is_valid:
        os.remove(image_path)  # Remove invalid image
        return jsonify({"success": False, "message": message}), 400
    
    # Create student face info folder
    face_info_folder = os.path.join(FACE_INFO_FOLDER, student_id)
    os.makedirs(face_info_folder, exist_ok=True)
    
    # Save face area information
    if face_area:
        with open(os.path.join(face_info_folder, f"face_area_{image_index}.json"), "w") as f:
            json.dump(face_area, f)
    
    # Extract features/representation
    features = extract_face_features(image_path)
    if features is not None:
        # Save features
        with open(os.path.join(face_info_folder, f"features_{image_index}.pkl"), "wb") as f:
            pickle.dump(features, f)
    
    # If this is the last image (index 4), save student info
    if image_index == 4:
        # Create student info
        student_info = {
            "name": name,
            "roll_no": roll_no,
            "class": student_class,
            "images": [f"image_{i}.jpg" for i in range(5)],
            "face_areas": [f"face_area_{i}.json" for i in range(5)],
            "features": [f"features_{i}.pkl" for i in range(5)]
        }
        
        # Save student info
        with open(os.path.join(face_info_folder, "info.json"), "w") as f:
            json.dump(student_info, f)
        
        return jsonify({
            "success": True, 
            "message": "All images processed successfully and face information stored"
        })
    
    return jsonify({
        "success": True, 
        "message": f"Image {image_index+1} uploaded and validated successfully"
    })

@app.route('/api/recognize-group', methods=['POST'])
def recognize_group():
    start_time = time.time()
    
    if 'image' not in request.files:
        return jsonify({"success": False, "message": "No image provided"}), 400
    
    image = request.files['image']
    
    # Save the group image temporarily
    group_image_path = os.path.join(UPLOAD_FOLDER, f"group_{uuid.uuid4()}.jpg")
    image.save(group_image_path)
    
    try:
        # Load all students information first
        all_students = []
        
        for student_folder in os.listdir(FACE_INFO_FOLDER):
            folder_path = os.path.join(FACE_INFO_FOLDER, student_folder)
            if os.path.isdir(folder_path):
                info_path = os.path.join(folder_path, "info.json")
                if os.path.exists(info_path):
                    try:
                        with open(info_path, "r") as f:
                            student_info = json.load(f)
                        
                        # Add student ID and folder path
                        student_info['id'] = student_folder
                        student_info['folder'] = folder_path
                        student_info['upload_folder'] = os.path.join(UPLOAD_FOLDER, student_folder)
                        
                        all_students.append(student_info)
                    except Exception as e:
                        print(f"Error loading student info: {str(e)}")
        
        # FASTER APPROACH: Use DeepFace.verify directly with pre-loaded data
        recognized_students = []
        
        # First detect faces in the group photo to get an accurate count
        img = cv2.imread(group_image_path)
        if img is None:
            return jsonify({"success": False, "message": "Failed to read group image"}), 400

        # Convert to RGB as MTCNN works with RGB format
        rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

        # Initialize MTCNN detector
        detector = MTCNN()

        # Detect faces
        group_faces = detector.detect_faces(rgb_img)
        actual_face_count = len(group_faces)
        print(f"MTCNN detected {actual_face_count} faces in the group photo")
        
        
        # Create a more efficient database structure for DeepFace
        temp_db_path = os.path.join(UPLOAD_FOLDER, "temp_db")
        if os.path.exists(temp_db_path):
            shutil.rmtree(temp_db_path)
        os.makedirs(temp_db_path, exist_ok=True)
        
        # Copy only the best image from each student (image_2.jpg is typically centered)
        for student in all_students:
            student_id = student.get('id')
            source_folder = student.get('upload_folder')
            target_folder = os.path.join(temp_db_path, student_id)
            os.makedirs(target_folder, exist_ok=True)
            
            # Copy center image (usually best quality)
            center_img = "image_2.jpg"
            source_path = os.path.join(source_folder, center_img)
            if os.path.exists(source_path):
                target_path = os.path.join(target_folder, "main.jpg")
                shutil.copy(source_path, target_path)
        
        try:
            # Use find with lower threshold and silent mode for speed
            print("Starting face recognition with DeepFace.find()...")
            results = DeepFace.find(
                img_path=group_image_path,
                db_path=temp_db_path,
                model_name="Facenet",
                distance_metric="cosine",
                enforce_detection=False,
                detector_backend="opencv",
                threshold=0.35,  # More permissive threshold
                silent=True  # Reduce console output
            )
            
            # Process results
            if isinstance(results, list):
                for result_df in results:
                    if not result_df.empty:
                        for _, row in result_df.iterrows():
                            identity = row['identity']
                            distance = row['distance']
                            
                            # Extract student ID from path
                            try:
                                path_parts = identity.split(os.sep)
                                student_id = None
                                
                                # Find the part after temp_db
                                for i, part in enumerate(path_parts):
                                    if part == "temp_db" and i+1 < len(path_parts):
                                        student_id = path_parts[i+1]
                                        break
                                
                                if student_id:
                                    # Find matching student
                                    matched_student = next((s for s in all_students if s.get('id') == student_id), None)
                                    
                                    if matched_student:
                                        # Check if already recognized
                                        if not any(s.get('roll_no') == matched_student.get('roll_no') for s in recognized_students):
                                            print(f"Recognized: {matched_student.get('name')} with distance {distance}")
                                            recognized_students.append({
                                                'name': matched_student.get('name'),
                                                'roll_no': matched_student.get('roll_no'),
                                                'class': matched_student.get('class')
                                            })
                            except Exception as parse_err:
                                print(f"Error parsing identity: {str(parse_err)}")
                                
        except Exception as find_err:
            print(f"DeepFace.find error: {str(find_err)}")
        
        # Clean up temp database
        if os.path.exists(temp_db_path):
            shutil.rmtree(temp_db_path)
        
        # If we haven't recognized enough faces, try direct verification
        # Only if we need to (performance optimization)
        if len(recognized_students) < actual_face_count:
            print(f"Only recognized {len(recognized_students)} out of {actual_face_count}. Trying verification...")
            
            # For each unrecognized student, try verification with their best image
            for student in all_students:
                # Skip already recognized students
                if any(s.get('roll_no') == student.get('roll_no') for s in recognized_students):
                    continue
                    
                student_id = student.get('id')
                user_folder = student.get('upload_folder')
                center_img = os.path.join(user_folder, "image_2.jpg")
                
                if os.path.exists(center_img):
                    try:
                        verification = DeepFace.verify(
                            img1_path=group_image_path,
                            img2_path=center_img,
                            model_name="Facenet",
                            distance_metric="cosine",
                            detector_backend="opencv",
                            enforce_detection=False
                        )
                        
                        print(f"Verification for {student['name']}: {verification}")
                        
                        if verification.get('verified', False):
                            recognized_students.append({
                                'name': student.get('name'),
                                'roll_no': student.get('roll_no'),
                                'class': student.get('class')
                            })
                    except Exception as verify_err:
                        print(f"Verification error for {student['name']}: {str(verify_err)}")
        
        # Clean up
        if os.path.exists(group_image_path):
            os.remove(group_image_path)
        
        # Sort recognized students by name
        recognized_students.sort(key=lambda x: x.get('name', ''))
        
        end_time = time.time()
        processing_time = end_time - start_time
        
        return jsonify({
            "success": True,
            "recognized_students": recognized_students,
            "faces_detected": actual_face_count,
            "processing_time_seconds": processing_time
        })
    
    except Exception as e:
        print(f"Recognition process error: {str(e)}")
        
        # Clean up
        if os.path.exists(group_image_path):
            os.remove(group_image_path)
        
        # Clean up any temporary files
        temp_db_path = os.path.join(UPLOAD_FOLDER, "temp_db")
        if os.path.exists(temp_db_path):
            shutil.rmtree(temp_db_path)
                
        return jsonify({
            "success": False,
            "message": f"Recognition error: {str(e)}"
        }), 500

if __name__ == '__main__':
    app.run(debug=True, port=3000)